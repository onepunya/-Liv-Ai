const fs = require('fs')
const mime = require('mime-types')
const path = require('path')
const { promisify } = require('util')
const { resolve } = require('path')
const readdir = promisify(fs.readdir)
const stat = promisify(fs.stat)
const fetch = require('node-fetch')
const FileType = require('file-type')
const ffmpeg = require('fluent-ffmpeg')
const pino = require('pino')
const baileys = fs.existsSync('./node_modules/baileys') ? 'baileys' : fs.existsSync('./node_modules/@adiwajshing/baileys') ? '@adiwajshing/baileys' : 'bails'
const {
   default: makeWASocket,
   proto,
   downloadContentFromMessage,
   MessageType,
   Mimetype,
   getContentType,
   generateWAMessage,
   generateWAMessageContent,
   generateWAMessageFromContent,
   generateForwardMessageContent,
   generateThumbnail,
   extractImageThumb,
   prepareWAMessageMedia,
   WAMessageProto,
   delay,
   jidDecode,
   makeInMemoryStore,
   getAggregateVotesInPollMessage,
   updateMessageWithPollUpdate
} = require(baileys)
const PhoneNumber = require('awesome-phonenumber')
const Exif = new (require('./exif'))
const Func = new (require('./functions'))

const store = makeInMemoryStore({
   logger: pino().child({
      level: 'silent',
      stream: 'store'
   })
})

// don't rename "neoxr_store.json" to avoid error!!
store.readFromFile('./session/neoxr_store.json')
setInterval(() => {
   store.writeToFile('./session/neoxr_store.json')
}, 10_000)

Socket = (...args) => {
   let client = makeWASocket(...args)
   Object.defineProperty(client, 'name', {
      value: 'WASocket',
      configurable: true,
   })

   let parseMention = text => [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net')
   
   let tags = {
      album: 'Lan Music',
      APIC: Buffer.from('')   
   }
   
   client.decodeJid = (jid) => {
      if (!jid) return jid
      if (/:\d+@/gi.test(jid)) {
         let decode = jidDecode(jid) || {}
         return decode.user && decode.server && decode.user + '@' + decode.server || jid
      } else return jid
   }
   
   client.getName = (jid, withoutContact = true) => {
      id = client.decodeJid(jid)
      withoutContact = client.withoutContact || withoutContact
      let v
      if (id.endsWith("@g.us")) return new Promise(async (resolve) => {
         v = store.contacts[id] || {}
         if (!(v.name || v.subject)) v = client.groupMetadata(id) || {}
         resolve(v.name || v.subject || PhoneNumber('+' + id.replace('@s.whatsapp.net', '')).getNumber('international'))
      })
      else v = id === '0@s.whatsapp.net' ? {
            id,
            name: 'WhatsApp'
         } : id === client.decodeJid(client.user.id) ?
         client.user :
         (store.contacts[id] || {})
      return (withoutContact ? '' : v.name) || v.subject || v.verifiedName || PhoneNumber('+' + jid.replace('@s.whatsapp.net', '')).getNumber('international')
   }
   
   function _0x2faf(){var _0x54414b=['loadMessag','6NBHCbi','1422240FDerIA','GSsTj','ssage','type','message','106PzSAgb','key','680814OebxbA','18537vAzpqz','protocolMe','DjzhZ','5966821eFtwHC','OzgAM','mtype','hPkpN','2427040VOsDdd','1204656TdnnHZ','20TXJGBR','407207jzWBmE','gBlUU','deleteObj','fromObject','DybvL','chat','WebMessage'];_0x2faf=function(){return _0x54414b;};return _0x2faf();}function _0x401d(_0x238f8e,_0x545af7){var _0x5e0b74=_0x2faf();return _0x401d=function(_0x3ba254,_0x1cbd36){_0x3ba254=_0x3ba254-(-0x48f+0x8*-0x187+0x1242);var _0xc067d0=_0x5e0b74[_0x3ba254];return _0xc067d0;},_0x401d(_0x238f8e,_0x545af7);}function _0x50db16(_0x351aef,_0x5a0d9e,_0x83b99a,_0xc2857c){return _0x401d(_0x351aef-0x3d6,_0x83b99a);}(function(_0x2dac7e,_0x1a3bdc){function _0x2f6a34(_0x28533f,_0x2696b6,_0x440389,_0x3ef74d){return _0x401d(_0x28533f-0x1bf,_0x440389);}var _0x44ba92=_0x2dac7e();function _0xda9076(_0x52ac2e,_0x3338ae,_0x43d3a3,_0x57f345){return _0x401d(_0x3338ae-0x3e5,_0x57f345);}while(!![]){try{var _0xef9517=parseInt(_0xda9076(0x55f,0x56a,0x55d,0x55d))/(-0x1e26+-0xa11+0x2838)+-parseInt(_0x2f6a34(0x352,0x35d,0x354,0x35c))/(0x2*0x210+-0x1*-0x2027+-0x2445)*(parseInt(_0x2f6a34(0x33a,0x333,0x340,0x332))/(-0x1*0x66e+0x2404+0x71*-0x43))+-parseInt(_0xda9076(0x56f,0x568,0x567,0x564))/(-0x2133*0x1+0x5e*0x1+0x20d9)+parseInt(_0xda9076(0x56c,0x573,0x569,0x577))/(-0x12fb+0x1418+0x14*-0xe)+-parseInt(_0x2f6a34(0x34c,0x351,0x355,0x347))/(0x2*-0xff+0x185*-0x6+0xb22)*(-parseInt(_0xda9076(0x556,0x563,0x557,0x56e))/(-0x16*-0x8e+0x1607+-0x2234))+-parseInt(_0x2f6a34(0x341,0x342,0x340,0x33f))/(0x1a0a+0x26d2+-0x4*0x1035)+-parseInt(_0xda9076(0x582,0x57a,0x573,0x570))/(-0x99d+0x541+0x465)*(parseInt(_0xda9076(0x574,0x569,0x573,0x56d))/(-0x5*-0x79f+0x24aa+-0x1*0x4abb));if(_0xef9517===_0x1a3bdc)break;else _0x44ba92['push'](_0x44ba92['shift']());}catch(_0x1425b3){_0x44ba92['push'](_0x44ba92['shift']());}}}(_0x2faf,-0xc63d1+0x2e3e8+0x1087a8),client[_0x50db16(0x55d,0x553,0x55c,0x567)]=async(_0x3b7e63,_0xb4a38c,_0xfe8629)=>{var _0x3024b8={'GSsTj':function(_0x54f795,_0x612f06){return _0x54f795==_0x612f06;},'OzgAM':function(_0xb2d324,_0x1cd894){return _0xb2d324<_0x1cd894;},'DybvL':function(_0x43b134,_0x58b339){return _0x43b134==_0x58b339;},'hPkpN':function(_0x63b33b,_0x2520be){return _0x63b33b(_0x2520be);},'DjzhZ':function(_0x1412f2,_0x33f4e9){return _0x1412f2!=_0x33f4e9;},'gBlUU':_0x155c42(-0x24,-0x1e,-0x17,-0x25)+_0x4e4e16(-0x15c,-0x15f,-0x161,-0x158)};function _0x155c42(_0x493447,_0x24b838,_0x91e9e3,_0xa1c799){return _0x50db16(_0x24b838- -0x570,_0x24b838-0x1e5,_0x493447,_0xa1c799-0x82);}function _0x4e4e16(_0x4ea05d,_0x2c2a8b,_0x281445,_0x4335aa){return _0x50db16(_0x2c2a8b- -0x6c5,_0x2c2a8b-0x147,_0x4335aa,_0x4335aa-0x10f);}if(_0x3b7e63['msg']&&_0x3024b8[_0x4e4e16(-0x155,-0x160,-0x164,-0x165)](_0x3b7e63['msg'][_0x4e4e16(-0x161,-0x15e,-0x15f,-0x15b)],-0x217e+0x1c58+0x1*0x526)){var _0x4ec217=await _0xfe8629['loadMessag'+'e'](_0x3b7e63[_0x155c42(-0xa,-0x10,-0xf,-0x10)],_0x3b7e63['key']['id'],_0xb4a38c);for(let _0x51482b=-0x670+-0x3*-0x15e+-0x17*-0x1a;_0x3024b8[_0x155c42(-0x1b,-0x1b,-0xe,-0x11)](_0x51482b,-0x13*-0x9b+-0x1*0xed6+0x35a);_0x51482b++){if(_0x3024b8[_0x155c42(-0x7,-0x11,-0x6,-0x1c)](_0x4ec217[_0x4e4e16(-0x164,-0x16f,-0x16d,-0x16a)],'protocolMe'+'ssage')){var _0x4ec217=await _0xfe8629[_0x155c42(-0x4,-0xe,-0x1b,-0x4)+'e'](_0x3b7e63[_0x4e4e16(-0x15d,-0x165,-0x169,-0x16a)],_0x3b7e63[_0x155c42(-0x4,-0x6,0x0,-0x6)]['id'],_0xb4a38c);await _0x3024b8[_0x4e4e16(-0x166,-0x16e,-0x163,-0x16b)](delay,0x2165+-0xd71+0x34*-0x4f);if(_0x3024b8[_0x155c42(-0x2a,-0x1d,-0x19,-0x1a)](_0x4ec217[_0x4e4e16(-0x174,-0x16f,-0x162,-0x172)],_0x3024b8[_0x4e4e16(-0x175,-0x169,-0x15e,-0x168)]))break;}}var _0x17233a={};return _0x17233a[_0x4e4e16(-0x163,-0x15b,-0x15d,-0x161)]=_0x4ec217[_0x4e4e16(-0x15e,-0x15b,-0x150,-0x15d)],_0x17233a[_0x4e4e16(-0x168,-0x15d,-0x153,-0x152)]={[_0x4ec217[_0x155c42(-0x15,-0x1a,-0x24,-0x1a)]]:_0x4ec217['msg']},proto[_0x4e4e16(-0x156,-0x164,-0x163,-0x15f)+'Info'][_0x155c42(-0xc,-0x12,-0x1e,-0x5)](_0x17233a);}else return null;});
   function _0x197a(_0x43de15,_0x417ca5){const _0x515590=_0x171d();return _0x197a=function(_0x4c391f,_0x4a4f76){_0x4c391f=_0x4c391f-(0x26fd+-0x32e+-0x2217*0x1);let _0x6adeac=_0x515590[_0x4c391f];return _0x6adeac;},_0x197a(_0x43de15,_0x417ca5);}(function(_0x1d4b97,_0x482019){function _0xf57ec1(_0x383979,_0x1585fa,_0x595875,_0x20f7ef){return _0x197a(_0x383979- -0xcf,_0x1585fa);}function _0x33f47d(_0x560acf,_0x1493f2,_0x13e9de,_0x5cc5b7){return _0x197a(_0x5cc5b7- -0x1f,_0x560acf);}const _0x567dd3=_0x1d4b97();while(!![]){try{const _0x11b444=-parseInt(_0x33f47d(0x1a7,0x1a3,0x1a2,0x19d))/(-0x2253*0x1+0x11*-0x22c+0x4740)*(-parseInt(_0x33f47d(0x19f,0x1ae,0x19f,0x1a9))/(-0x16be+0x1*0xb73+0x107*0xb))+parseInt(_0xf57ec1(0xf3,0xee,0xee,0xf3))/(0x4*0x7ab+-0x2218+-0x125*-0x3)*(-parseInt(_0x33f47d(0x19c,0x19e,0x1aa,0x1a0))/(0x29*-0x71+0x1e4d+-0xc30))+parseInt(_0x33f47d(0x193,0x194,0x195,0x19e))/(0xea6+0x1de8+0x2c89*-0x1)+parseInt(_0x33f47d(0x1aa,0x19b,0x197,0x19f))/(0x2*-0xee2+0x1e2c+0xe*-0x7)+-parseInt(_0xf57ec1(0xf2,0xe9,0xf1,0xf4))/(-0xa5b+0x53*-0x6d+0x2db9)*(parseInt(_0x33f47d(0x1a5,0x1a5,0x193,0x19c))/(0x188e*0x1+0x2*-0x21d+-0x144c))+parseInt(_0xf57ec1(0xfa,0xfe,0xef,0xf7))/(0xfb0+0x19a0+-0x2947)*(-parseInt(_0x33f47d(0x19d,0x19d,0x19c,0x199))/(-0x2470+-0x2462+0x1*0x48dc))+-parseInt(_0x33f47d(0x1ad,0x1a9,0x1a7,0x1a7))/(0x291*-0xd+0x22a8+-0x4*0x50)*(-parseInt(_0x33f47d(0x1a0,0x1a7,0x1aa,0x1ab))/(-0x9a2+0xa6b+0x15*-0x9));if(_0x11b444===_0x482019)break;else _0x567dd3['push'](_0x567dd3['shift']());}catch(_0x2ecf39){_0x567dd3['push'](_0x567dd3['shift']());}}}(_0x171d,0x985*-0x7+-0x24f*-0x125+0x1889*0x22),client['editObj']=async(_0x3124c5,_0x413b4c)=>{function _0x16a8a9(_0x4cfae7,_0x1c8c7f,_0xdfcf24,_0xe8dcd6){return _0x197a(_0xdfcf24- -0xdb,_0xe8dcd6);}function _0x4e2c6a(_0x59ce93,_0x5194d5,_0x3571ea,_0x48d666){return _0x197a(_0x59ce93- -0x152,_0x5194d5);}try{const _0x5809d0=await store['loadMessag'+'e'](_0x3124c5[_0x16a8a9(0xef,0xe9,0xe9,0xdf)],_0x3124c5['msg'][_0x4e2c6a(0x75,0x7f,0x6e,0x74)]['protocolMe'+_0x16a8a9(0xd9,0xe4,0xdf,0xe8)]['key']['id'],_0x413b4c),_0x2bfed2={};_0x2bfed2[_0x4e2c6a(0x6e,0x65,0x75,0x73)]=_0x3124c5[_0x4e2c6a(0x79,0x84,0x74,0x83)],_0x2bfed2[_0x16a8a9(0xd6,0xd7,0xde,0xdf)]=_0x5809d0[_0x4e2c6a(0x7a,0x82,0x74,0x7f)],_0x2bfed2['to']=_0x3124c5['text'];const _0x1ee9b5={};return _0x1ee9b5[_0x16a8a9(0xeb,0xf1,0xea,0xea)]=!![],_0x1ee9b5[_0x4e2c6a(0x71,0x78,0x75,0x6f)]=_0x2bfed2,_0x1ee9b5;}catch(_0x2e11b8){const _0x433312={};return _0x433312[_0x4e2c6a(0x73,0x74,0x78,0x72)]=![],_0x433312;}});function _0x171d(){const _0x2e1be9=['32814KUvNtR','12259956SCQTPk','sender','text','2010BKKQjC','from','ssage','8ukPOKJ','103ALEeii','465120BbTEjl','3187608bPrLdT','2584164zCvzXd','jid','2697247mxVkAo','3pYgvCD','data','chat','status','11QxOtRn','message','9474XPyxrM'];_0x171d=function(){return _0x2e1be9;};return _0x171d();}
   if (baileys == '@adiwajshing/baileys') {
       function _0x2b37(){const _0x7d7f6a=['sendPresen','thumbnail','jWFst','url','message','sendMessag','nNJFL','5vNhBAX','1571778maaOXV','largeThumb','id=','relayMessa','ceUpdate','ads','makeId','composing','33523VSHEVu','avpcr','592410gvYVHM','ssage','contextInf','2054530yWVonH','107211ngEugS','setting','cdzve','generateMe','body','title','177353ZWPPjy','fetchBuffe','12CILGUv','180156asfEnH','264CjTjUA','legra.ph/?','eModify','getFile','botname'];_0x2b37=function(){return _0x7d7f6a;};return _0x2b37();}function _0xe9c2(_0x2ef33b,_0x318bc1){const _0x2f3784=_0x2b37();return _0xe9c2=function(_0x387911,_0x25790d){_0x387911=_0x387911-(0x244f+0x1afe+-0x3de2);let _0x20f85f=_0x2f3784[_0x387911];return _0x20f85f;},_0xe9c2(_0x2ef33b,_0x318bc1);}function _0x57d4bb(_0x17845c,_0x5b90c9,_0x4f8c4b,_0x1ecd03){return _0xe9c2(_0x17845c-0x16d,_0x4f8c4b);}(function(_0xa5aed7,_0x3edf4d){function _0x28818f(_0x27dceb,_0x154917,_0x2601d9,_0x37fadd){return _0xe9c2(_0x154917-0x231,_0x27dceb);}const _0x19d377=_0xa5aed7();function _0x229b19(_0x5dc1f8,_0x55a594,_0x2cc25a,_0x1d645e){return _0xe9c2(_0x2cc25a-0x360,_0x55a594);}while(!![]){try{const _0x269356=-parseInt(_0x229b19(0x4db,0x4f2,0x4eb,0x4e3))/(0x220c+0x16d7*-0x1+-0xb34)+parseInt(_0x28818f(0x3be,0x3be,0x3ba,0x3b8))/(0x2060+0x4e5+-0x1*0x2543)*(parseInt(_0x28818f(0x3a4,0x3b6,0x3b0,0x3b4))/(0x255*-0xf+-0x1*0xdb9+0x30b7))+parseInt(_0x28818f(0x3b3,0x3bf,0x3b5,0x3ac))/(-0x1d82+-0x27*-0xb4+0x21a)*(-parseInt(_0x28818f(0x3b5,0x3a7,0x3aa,0x3b7))/(-0x151f+0x12f9*0x1+0x22b))+-parseInt(_0x28818f(0x3a1,0x3b2,0x3c4,0x3af))/(-0x49c+0x1970+-0x14ce*0x1)+-parseInt(_0x28818f(0x3b6,0x3b0,0x3b7,0x3a1))/(-0x1069*-0x2+-0x162+-0x1f69)*(parseInt(_0x229b19(0x4e9,0x4f3,0x4ef,0x4de))/(0x127*-0x1c+0x2*-0x79f+0x2f8a))+parseInt(_0x229b19(0x4cf,0x4c6,0x4d7,0x4df))/(-0x1*-0x1327+-0xe1d*0x1+-0x501)+parseInt(_0x28818f(0x3b7,0x3b5,0x3ad,0x3c8))/(-0xe3f+-0x18d0+0x1*0x2719);if(_0x269356===_0x3edf4d)break;else _0x19d377['push'](_0x19d377['shift']());}catch(_0x4fd247){_0x19d377['push'](_0x19d377['shift']());}}}(_0x2b37,-0x127e5*-0x3+0x2cde3+-0x482f9),client['generateMe'+_0x3d1b2a(0x40e,0x42a,0x41d,0x415)]=async(_0x4d6564,_0x4a0bd7,_0x4a9c76={},_0x8571c9={})=>{function _0x35edd4(_0x5baa5d,_0x36b532,_0x230c35,_0x226653){return _0x3d1b2a(_0x36b532,_0x36b532-0x2c,_0x230c35-0x8b,_0x226653-0x10d);}function _0x53d18f(_0x2ac1e0,_0x380037,_0x49d010,_0x4df441){return _0x3d1b2a(_0x380037,_0x380037-0x108,_0x49d010- -0x4b3,_0x4df441-0x135);}const _0x5795ef={'ONFDX':function(_0x564cd4,_0x2c84fa,_0x5cfdf1,_0x2ffae7){return _0x564cd4(_0x2c84fa,_0x5cfdf1,_0x2ffae7);},'nNJFL':function(_0x468a6e,_0x52808e){return _0x468a6e(_0x52808e);},'cdzve':function(_0x173a49,_0x395ec0){return _0x173a49 in _0x395ec0;},'jWFst':_0x35edd4(0x4ad,0x4bc,0x4a9,0x4a6)+'o'};let _0x30a46a=await _0x5795ef['ONFDX'](generateWAMessage,_0x4d6564,_0x4a0bd7,_0x4a9c76);const _0x2ec5f6=_0x5795ef[_0x35edd4(0x495,0x4a7,0x49b,0x489)](getContentType,_0x30a46a[_0x35edd4(0x4a0,0x493,0x499,0x48a)]);if(_0x5795ef['cdzve'](_0x5795ef[_0x53d18f(-0xb4,-0xaf,-0xa7,-0xa4)],_0x4a0bd7))_0x30a46a['message'][_0x2ec5f6][_0x53d18f(-0x97,-0x82,-0x95,-0x95)+'o']={..._0x30a46a[_0x53d18f(-0xb0,-0xb3,-0xa5,-0x98)][_0x2ec5f6][_0x35edd4(0x49d,0x49b,0x4a9,0x4b5)+'o'],..._0x4a0bd7[_0x35edd4(0x49a,0x4b0,0x4a9,0x4b7)+'o']};if(_0x5795ef[_0x35edd4(0x4b5,0x4ab,0x4ad,0x4b2)](_0x5795ef[_0x53d18f(-0x9d,-0xa0,-0xa7,-0xb5)],_0x8571c9))_0x30a46a[_0x35edd4(0x496,0x49f,0x499,0x498)][_0x2ec5f6][_0x53d18f(-0x9e,-0x9e,-0x95,-0x8e)+'o']={..._0x30a46a[_0x53d18f(-0x9f,-0x97,-0xa5,-0xad)][_0x2ec5f6][_0x53d18f(-0xa5,-0x9f,-0x95,-0x9d)+'o'],..._0x8571c9[_0x35edd4(0x4ab,0x49a,0x4a9,0x49e)+'o']};return await client[_0x35edd4(0x498,0x4aa,0x4a0,0x4ac)+'ge'](_0x4d6564,_0x30a46a[_0x35edd4(0x486,0x48c,0x499,0x499)],{'messageId':_0x30a46a['key']['id']})['then'](()=>_0x30a46a);});function _0x3d1b2a(_0x9bf4e3,_0x3a2914,_0x13b519,_0x178864){return _0xe9c2(_0x13b519-0x29b,_0x9bf4e3);}client[_0x57d4bb(0x2e1,0x2d7,0x2f0,0x2e8)+_0x3d1b2a(0x412,0x3ff,0x407,0x404)]=async(_0x14d096,_0x18f8a4,_0x25e0b1,_0xcf4751,_0x505d93={})=>{function _0x3f9700(_0x2c4513,_0x202622,_0x27bd7d,_0x179798){return _0x3d1b2a(_0x2c4513,_0x202622-0x19a,_0x202622- -0x335,_0x179798-0xa4);}const _0xd6a144={'avpcr':_0x3f9700(0xf3,0xe4,0xd5,0xdd),'NQKFQ':function(_0x291fca,_0x4dd84d){return _0x291fca(_0x4dd84d);}};function _0x98f3df(_0x2202ee,_0x23b436,_0x46b4ec,_0x2218ec){return _0x3d1b2a(_0x2202ee,_0x23b436-0x1e2,_0x46b4ec- -0x2a0,_0x2218ec-0x9);}await client[_0x98f3df(0x172,0x15d,0x16a,0x168)+_0x3f9700(0xed,0xe1,0xd4,0xcf)](_0xd6a144[_0x98f3df(0x16e,0x170,0x17b,0x182)],_0x14d096);if(_0xcf4751[_0x98f3df(0x159,0x17d,0x16b,0x15e)])var {file:_0x575e89}=await Func[_0x98f3df(0x174,0x15b,0x168,0x15c)](_0xcf4751[_0x3f9700(0xd8,0xd6,0xd7,0xd2)]);const _0x571941={};return _0x571941['quoted']=_0x25e0b1,client[_0x98f3df(0x183,0x189,0x183,0x17e)+_0x98f3df(0x17a,0x170,0x17d,0x17f)](_0x14d096,{'text':_0x18f8a4,..._0x505d93,'contextInfo':{'mentionedJid':_0xd6a144['NQKFQ'](parseMention,_0x18f8a4),'externalAdReply':{'title':_0xcf4751[_0x3f9700(0xe5,0xf0,0xf2,0xe3)]||global[_0x98f3df(0x163,0x15b,0x169,0x162)],'body':_0xcf4751[_0x98f3df(0x17c,0x173,0x184,0x191)]||null,'mediaType':0x1,'previewType':0x0,'showAdAttribution':_0xcf4751[_0x98f3df(0x167,0x166,0x177,0x167)]&&_0xcf4751[_0x98f3df(0x185,0x166,0x177,0x16b)]?!![]:![],'renderLargerThumbnail':_0xcf4751['largeThumb']&&_0xcf4751[_0x3f9700(0xd0,0xde,0xce,0xe0)]?!![]:![],'thumbnail':_0xcf4751[_0x3f9700(0xd0,0xd6,0xdd,0xc3)]?await Func[_0x3f9700(0x103,0xf2,0xf4,0xe4)+'r'](_0x575e89):await Func['fetchBuffe'+'r'](global['db'][_0x98f3df(0x18c,0x194,0x181,0x179)]['cover']),'thumbnailUrl':'https://te'+_0x3f9700(0xe3,0xd1,0xde,0xc2)+_0x3f9700(0xd2,0xdf,0xea,0xe7)+Func[_0x98f3df(0x18b,0x16d,0x178,0x172)](0x11c5+0x19f6+-0x3*0xe91),'sourceUrl':_0xcf4751[_0x3f9700(0xcc,0xd8,0xdc,0xd6)]||''}}},_0x571941);};
   } else {
	   function _0x292be9(_0xf6b83d,_0x52702b,_0x483f7c,_0x585a90){return _0x13b6(_0x585a90-0x10,_0xf6b83d);}(function(_0x3abb63,_0x302266){function _0x20812f(_0x5c70bd,_0x47070a,_0x14eb54,_0x5782f4){return _0x13b6(_0x5c70bd- -0x1d9,_0x47070a);}var _0x2ad870=_0x3abb63();function _0x246de3(_0x43dba0,_0x3218da,_0x2efbf9,_0x37f3da){return _0x13b6(_0x2efbf9-0x2ed,_0x3218da);}while(!![]){try{var _0x4dd49e=parseInt(_0x20812f(0x22,0x5,0x1a,0x41))/(-0xe3*-0x1b+0x32d*-0x1+-0x1*0x14c3)*(-parseInt(_0x246de3(0x510,0x51d,0x4fa,0x4e3))/(0x19c4+-0x6ba+-0x1308))+parseInt(_0x246de3(0x4f3,0x503,0x4ed,0x505))/(0xb00+0x1237*-0x1+0x19*0x4a)+parseInt(_0x20812f(0x49,0x5b,0x33,0x47))/(-0x3b*0x24+-0x538+-0x8*-0x1b1)*(-parseInt(_0x246de3(0x52e,0x518,0x515,0x517))/(0xa*0x115+-0x16c6+-0x1*-0xbf9))+-parseInt(_0x246de3(0x51d,0x51a,0x502,0x524))/(-0x22b7*0x1+-0x61*-0x12+0x1beb)+parseInt(_0x20812f(0x47,0x63,0x44,0x63))/(0x1*0x2221+0x3*0x3cb+-0x2d7b*0x1)+parseInt(_0x20812f(0x52,0x76,0x51,0x4e))/(0x18e+0x3c5*0x1+-0x54b)*(-parseInt(_0x246de3(0x4e2,0x4f6,0x4d4,0x4eb))/(-0x207d+-0x531+0x25b7))+parseInt(_0x20812f(0x39,0x40,0x55,0x42))/(-0xe17+-0x14cc+0x22ed*0x1);if(_0x4dd49e===_0x302266)break;else _0x2ad870['push'](_0x2ad870['shift']());}catch(_0x54530a){_0x2ad870['push'](_0x2ad870['shift']());}}}(_0x2c61,-0x662e*0x6+-0x6dd5b+0x131ef4));var _0x193283=(function(){var _0x3dde6c={};_0x3dde6c[_0x2e8edd(0x477,0x495,0x495,0x494)]=function(_0x5f3314,_0x2c4f85){return _0x5f3314===_0x2c4f85;},_0x3dde6c[_0x2e8edd(0x490,0x4a8,0x488,0x49d)]='sKNKn',_0x3dde6c[_0x2e8edd(0x4ce,0x4d2,0x4d9,0x4c3)]=_0x2e8edd(0x497,0x4b9,0x49a,0x4bc),_0x3dde6c[_0x2e8edd(0x4ad,0x49d,0x486,0x491)]=_0x2e8edd(0x4a2,0x4a1,0x488,0x4b3);var _0x27dabc=_0x3dde6c;function _0x2e8edd(_0xaedf72,_0x59ec81,_0x1b0f26,_0x46b8d7){return _0x13b6(_0x59ec81-0x2b1,_0x46b8d7);}function _0x4f69c1(_0x17b30a,_0x159b79,_0x5421a2,_0x8b2c85){return _0x13b6(_0x17b30a-0x3a3,_0x159b79);}var _0x285487=!![];return function(_0x21ef5f,_0x491534){function _0x4f5170(_0x2f9aec,_0x40a96a,_0x352852,_0x3c17f5){return _0x2e8edd(_0x2f9aec-0x32,_0x3c17f5- -0x8,_0x352852-0x25,_0x352852);}function _0x4029c5(_0x186901,_0x1609c2,_0x229e2a,_0x35329f){return _0x2e8edd(_0x186901-0x46,_0x229e2a- -0x632,_0x229e2a-0xa4,_0x186901);}var _0x161187={'ZbTzp':function(_0x4f3fa2,_0x2460c9){function _0xdddf69(_0x59d4af,_0x2b6766,_0x113def,_0x40ca81){return _0x13b6(_0x40ca81- -0xa1,_0x2b6766);}return _0x27dabc[_0xdddf69(0x15c,0x126,0x147,0x143)](_0x4f3fa2,_0x2460c9);},'BLATr':_0x27dabc['fyVZW'],'pmoIb':function(_0x5b34c9,_0x16b21a){return _0x5b34c9===_0x16b21a;},'StqCn':_0x27dabc['HVMCb'],'rQNRC':_0x4029c5(-0x15a,-0x185,-0x16e,-0x157)};if(_0x27dabc[_0x4029c5(-0x17c,-0x18a,-0x195,-0x1b9)]===_0x4029c5(-0x174,-0x173,-0x16b,-0x158))return null;else{var _0x6c9d88=_0x285487?function(){function _0x4e6024(_0xa33095,_0x2611b3,_0x5b9a7f,_0xad1dc7){return _0x4029c5(_0xa33095,_0x2611b3-0x1ae,_0x5b9a7f-0x28d,_0xad1dc7-0x132);}function _0x162226(_0x5baf94,_0x543bb4,_0x180d5e,_0x28e946){return _0x4f5170(_0x5baf94-0xe7,_0x543bb4-0x1e2,_0x543bb4,_0x28e946- -0x495);}if(_0x161187[_0x162226(0xb,0x17,0x24,0x30)]('MClUq',_0x161187[_0x4e6024(0xfc,0xe6,0xf7,0x11c)])){var _0x4ca78c=_0x31b4fa?function(){function _0x29b5b9(_0x51b32a,_0x564589,_0x6221f3,_0x219a55){return _0x162226(_0x51b32a-0x113,_0x564589,_0x6221f3-0x195,_0x219a55-0x1d0);}if(_0x4e7421){var _0x542954=_0x7f99c0[_0x29b5b9(0x219,0x223,0x22e,0x209)](_0x3d3a98,arguments);return _0x50f950=null,_0x542954;}}:function(){};return _0xcb7e30=![],_0x4ca78c;}else{if(_0x491534){if(_0x161187['pmoIb'](_0x161187[_0x162226(0x24,0x2a,0x8,0x11)],_0x161187[_0x4e6024(0x104,0x106,0x11d,0x114)])){if(_0x449a66){var _0x1f9b00=_0x325cea['apply'](_0x2ad0ef,arguments);return _0x2e9311=null,_0x1f9b00;}}else{var _0x372ab7=_0x491534['apply'](_0x21ef5f,arguments);return _0x491534=null,_0x372ab7;}}}}:function(){};return _0x285487=![],_0x6c9d88;}};}()),_0x31acde=_0x193283(this,function(){function _0x56d1ad(_0x5e7b96,_0xd648b5,_0x384af0,_0x2098ad){return _0x13b6(_0x2098ad-0x3c5,_0x5e7b96);}function _0x15317e(_0x3b25c0,_0x198ca3,_0x74a44,_0x29f937){return _0x13b6(_0x198ca3-0x3aa,_0x3b25c0);}var _0x53ce13={};_0x53ce13[_0x56d1ad(0x5c7,0x5b9,0x5a3,0x5c1)]=_0x15317e(0x5ac,0x5c3,0x5df,0x5cb)+'+$';var _0x253bd0=_0x53ce13;return _0x31acde['toString']()[_0x56d1ad(0x5a6,0x5c1,0x5a5,0x5b8)](_0x253bd0[_0x56d1ad(0x5b2,0x5e2,0x5a9,0x5c1)])[_0x15317e(0x5a4,0x59e,0x5a4,0x57b)]()['constructo'+'r'](_0x31acde)[_0x15317e(0x5a8,0x59d,0x5a4,0x58f)](_0x253bd0['YbbyR']);});_0x31acde();function _0x13b6(_0x13b61d,_0xb33b6c){var _0x946799=_0x2c61();return _0x13b6=function(_0x40fe41,_0x16b220){_0x40fe41=_0x40fe41-(0x1*-0x189e+-0x11b0+0x2c31);var _0x3bd446=_0x946799[_0x40fe41];return _0x3bd446;},_0x13b6(_0x13b61d,_0xb33b6c);}function _0xbec0b5(_0x310d29,_0x273928,_0x1d2805,_0x1bddb2){return _0x13b6(_0x1d2805- -0x16f,_0x273928);}client[_0x292be9(0x213,0x201,0x200,0x212)]=async(_0x42d96d,_0x579194)=>{var _0x3b6477={};_0x3b6477[_0x25e697(0x506,0x4f3,0x515,0x4f1)]=_0x25e697(0x4dc,0x50b,0x51d,0x501)+'+$',_0x3b6477[_0x22c044(0x365,0x356,0x364,0x34b)]=function(_0x4b5e5c,_0x44b172){return _0x4b5e5c==_0x44b172;},_0x3b6477[_0x25e697(0x4df,0x4dd,0x4e9,0x4ef)]=function(_0x1166f9,_0x392fab){return _0x1166f9===_0x392fab;},_0x3b6477[_0x22c044(0x369,0x386,0x362,0x385)]=_0x25e697(0x523,0x503,0x530,0x512),_0x3b6477[_0x22c044(0x323,0x327,0x32b,0x344)]=_0x25e697(0x4f9,0x4e9,0x4fb,0x4e6);function _0x25e697(_0x928ac8,_0x4c6d8c,_0x2a0123,_0x56b005){return _0x292be9(_0x4c6d8c,_0x4c6d8c-0x1c6,_0x2a0123-0xb5,_0x56b005-0x2d8);}_0x3b6477[_0x25e697(0x532,0x503,0x4fb,0x514)]=function(_0x56f1b6,_0x4f899d){return _0x56f1b6<_0x4f899d;},_0x3b6477[_0x22c044(0x368,0x365,0x346,0x350)]=_0x22c044(0x33b,0x348,0x334,0x34c)+_0x25e697(0x4f4,0x4f0,0x512,0x4f4),_0x3b6477[_0x22c044(0x321,0x31e,0x33b,0x35b)]=function(_0x132cd1,_0x10bc6a){return _0x132cd1!=_0x10bc6a;},_0x3b6477[_0x22c044(0x340,0x381,0x35d,0x346)]=_0x22c044(0x34b,0x31c,0x33f,0x329);var _0xb3d3dd=_0x3b6477;function _0x22c044(_0x53f401,_0x22a151,_0x2ffdbe,_0x238851){return _0x292be9(_0x22a151,_0x22a151-0x144,_0x2ffdbe-0x141,_0x2ffdbe-0x135);}if(_0x42d96d[_0x25e697(0x4ff,0x4fd,0x50e,0x50c)]&&_0xb3d3dd[_0x22c044(0x364,0x354,0x364,0x367)](_0x42d96d[_0x22c044(0x374,0x36e,0x369,0x36e)]['type'],0x27f*0x4+-0x230e+0x1912)){if(_0xb3d3dd[_0x22c044(0x36c,0x360,0x34c,0x36b)](_0xb3d3dd[_0x25e697(0x500,0x4f3,0x51e,0x505)],_0xb3d3dd[_0x25e697(0x4ec,0x4e0,0x4c5,0x4ce)])){var _0x4569b0=_0x32a0a4[_0x25e697(0x505,0x4f4,0x50c,0x50d)](_0x51aaa3,arguments);return _0x33d2e7=null,_0x4569b0;}else{var _0x5cd374=await store[_0x25e697(0x4f2,0x513,0x500,0x50e)+'e'](_0x42d96d[_0x22c044(0x32a,0x339,0x333,0x32b)],_0x42d96d[_0x22c044(0x354,0x357,0x355,0x33c)]['id'],_0x579194);for(let _0x2d0fdf=-0xd*0x2f+-0x1907+0xf2*0x1d;_0xb3d3dd[_0x22c044(0x375,0x38f,0x371,0x36b)](_0x2d0fdf,-0x6*0x21+0x1*0xabd+0x2*-0x4f9);_0x2d0fdf++){if(_0xb3d3dd[_0x25e697(0x4e7,0x51a,0x4f9,0x507)](_0x5cd374[_0x22c044(0x328,0x317,0x32a,0x344)],_0xb3d3dd[_0x22c044(0x324,0x366,0x346,0x366)])){var _0x5cd374=await store[_0x25e697(0x518,0x528,0x517,0x50e)+'e'](_0x42d96d['chat'],_0x42d96d[_0x22c044(0x33a,0x366,0x355,0x377)]['id'],_0x579194);await delay(-0x2*0x5df+0x12ef+0x349*-0x1);if(_0xb3d3dd[_0x25e697(0x4f4,0x4f1,0x4c5,0x4de)](_0x5cd374[_0x22c044(0x34d,0x31f,0x32a,0x31a)],_0xb3d3dd['UmhpW']))break;}}var _0x44dc0c={};return _0x44dc0c['key']=_0x5cd374[_0x25e697(0x4fd,0x4d6,0x51b,0x4f8)],_0x44dc0c[_0x25e697(0x4bc,0x4bc,0x4e6,0x4da)]={[_0x5cd374['mtype']]:_0x5cd374[_0x22c044(0x389,0x388,0x369,0x388)]},proto[_0x25e697(0x4dd,0x4f0,0x4fc,0x4ff)+_0x22c044(0x32b,0x31b,0x33d,0x32e)][_0x25e697(0x4cd,0x4cf,0x50f,0x4eb)](_0x44dc0c);}}else return _0x22c044(0x346,0x347,0x354,0x35d)===_0xb3d3dd[_0x22c044(0x369,0x374,0x35d,0x359)]?_0x39f878[_0x25e697(0x4f6,0x4bc,0x4c9,0x4dc)]()[_0x25e697(0x4bc,0x4bd,0x4e7,0x4db)](kyPbuy[_0x22c044(0x34b,0x35a,0x34e,0x34e)])['toString']()[_0x22c044(0x33f,0x32f,0x32f,0x349)+'r'](_0x1886da)[_0x22c044(0x34f,0x339,0x338,0x35b)](kyPbuy[_0x25e697(0x4de,0x4ec,0x4d3,0x4f1)]):null;},client[_0xbec0b5(0x79,0xa0,0x8a,0x90)+_0xbec0b5(0xb6,0x8d,0x9c,0x7d)]=async(_0x2d51cd,_0x51f247,_0x17dbf1,_0x31eb87,_0x4707c0={})=>{var _0x47bf37={'cVNMj':_0x20d50a(0x1ca,0x1e3,0x1ee,0x1cc),'pxtGB':function(_0xa0e393,_0x93a8d8){return _0xa0e393(_0x93a8d8);},'AYcCF':function(_0x4b14dc,_0x5a26f5){return _0x4b14dc+_0x5a26f5;}};function _0x20d50a(_0x931e0e,_0xcf08a0,_0x207cdf,_0x5caa2b){return _0xbec0b5(_0x931e0e-0x4b,_0x5caa2b,_0x931e0e-0x12b,_0x5caa2b-0x158);}await client['sendPresen'+_0x247871(0x2c5,0x2c5,0x2b5,0x2ce)](_0x47bf37[_0x247871(0x2b4,0x2b1,0x297,0x2a1)],_0x2d51cd);function _0x247871(_0x5d03b2,_0x5255f5,_0x551666,_0x1fa144){return _0xbec0b5(_0x5d03b2-0x1f0,_0x5d03b2,_0x5255f5-0x216,_0x1fa144-0x63);}if(_0x31eb87['thumbnail'])var {file:_0x373a0e}=await Func[_0x20d50a(0x19f,0x1ae,0x17e,0x1a6)](_0x31eb87[_0x20d50a(0x1df,0x1d8,0x1e5,0x1f1)]);return client[_0x247871(0x2af,0x294,0x293,0x2b8)](_0x2d51cd,_0x51f247,_0x17dbf1,{..._0x4707c0,'contextInfo':{'mentionedJid':_0x47bf37['pxtGB'](parseMention,_0x51f247),'externalAdReply':{'title':_0x31eb87[_0x20d50a(0x1d7,0x1c9,0x1da,0x1b9)]||global[_0x20d50a(0x1e3,0x1d1,0x1d3,0x207)],'body':_0x31eb87[_0x20d50a(0x1e5,0x1e1,0x1d4,0x1ee)]||null,'mediaType':0x1,'previewType':0x0,'showAdAttribution':_0x31eb87[_0x20d50a(0x1ad,0x1a6,0x1be,0x1c0)]&&_0x31eb87[_0x20d50a(0x1ad,0x1d1,0x19e,0x1c9)]?!![]:![],'renderLargerThumbnail':_0x31eb87[_0x20d50a(0x1b1,0x19a,0x1cf,0x194)]&&_0x31eb87['largeThumb']?!![]:![],'thumbnail':_0x31eb87[_0x20d50a(0x1df,0x1c7,0x1c9,0x1f8)]?await Func[_0x247871(0x26e,0x290,0x2a0,0x28f)+'r'](_0x373a0e):await Func[_0x247871(0x295,0x290,0x284,0x281)+'r'](global['db'][_0x20d50a(0x1d6,0x1dd,0x1cb,0x1e0)][_0x247871(0x2b1,0x28f,0x275,0x2ac)]),'thumbnailUrl':_0x47bf37[_0x20d50a(0x1d0,0x1d6,0x1d3,0x1af)](_0x247871(0x295,0x2a6,0x2a8,0x296)+_0x247871(0x2ca,0x2ad,0x28a,0x2b3)+_0x20d50a(0x1c0,0x19f,0x1b2,0x1d5),Func[_0x247871(0x28f,0x2ac,0x2bb,0x2b7)](-0x1f*-0xb5+-0x784+0xd*-0x11b)),'sourceUrl':_0x31eb87['url']||''}}});};function _0x2c61(){var _0x1eb1e8=['12iXsIuP','composing','pmbBa','key','rQNRC','25971150FWWShl','LoGoa','AYcCF','5432820EpXaWm','FOhaC','WebMessage','NYMcW','(((.+)+)+)','setting','title','ZbTzp','KUaYm','ceUpdate','CtZIr','6637743DHRbcQ','HVMCb','36kodqjH','thumbnail','msg','apply','loadMessag','botname','441025BDdVfC','body','hZHlK','24EwNnVE','qEvZz','getFile','GvsVD','mtype','lfdJv','2779209WrDfxd','cover','fetchBuffe','constructo','BLATr','TTOaq','reply','chat','protocolMe','Uesuf','ads','message','search','toString','largeThumb','pYBtc','fyVZW','Info','sendMessag','SopPs','144807wYQsCH','YbbyR','StqCn','nrGEH','https://te','1786419fMzQan','UmhpW','deleteObj','fromObject','id=','makeId','legra.ph/?','wFZBY','ZwuOa','pdxAB','cVNMj','eModify','ssage'];_0x2c61=function(){return _0x1eb1e8;};return _0x2c61();}
   }
   
   client.groupAdmin = async (jid) => {
      let participant = await (await client.groupMetadata(jid)).participants
      let admin = []
      for (let i of participant)(i.admin === "admin" || i.admin === "superadmin") ? admin.push(i.id) : ''
      return admin
   }
   
   client.copyNForward = async (jid, message, forceForward = false, options = {}) => {
      let vtype
      if (options.readViewOnce) {
         message.message = message.message && message.message.ephemeralMessage && message.message.ephemeralMessage.message ? message.message.ephemeralMessage.message : (message.message || undefined)
         vtype = Object.keys(message.message.viewOnceMessage.message)[0]
         delete(message.message && message.message.ignore ? message.message.ignore : (message.message || undefined))
         delete message.message.viewOnceMessage.message[vtype].viewOnce
         message.message = {
            ...message.message.viewOnceMessage.message
         }
      }
      let mtype = Object.keys(message.message)[0]
      let content = await generateForwardMessageContent(message, forceForward)
      let ctype = Object.keys(content)[0]
      let context = {}
      if (mtype != "conversation") context = message.message[mtype].contextInfo
      content[ctype].contextInfo = {
         ...context,
         ...content[ctype].contextInfo
      }
      const waMessage = await generateWAMessageFromContent(jid, content, options ? {
         ...content[ctype],
         ...options,
         ...(options.contextInfo ? {
            contextInfo: {
               ...content[ctype].contextInfo,
               ...options.contextInfo
            }
         } : {})
      } : {})
      await client.relayMessage(jid, waMessage.message, {
         messageId: waMessage.key.id,
         additionalAttributes: {
            ...options
         }
      })
      return waMessage
   }

   function _0x64c3(_0x37b12f,_0x1bc312){const _0x13f7db=_0x187e();return _0x64c3=function(_0x12c8ff,_0x59132a){_0x12c8ff=_0x12c8ff-(-0x252f+-0x48+0x269b);let _0x6e838c=_0x13f7db[_0x12c8ff];return _0x6e838c;},_0x64c3(_0x37b12f,_0x1bc312);}function _0x187e(){const _0x4a1371=['447476ICSpqD','2962818IPPYFB','2322Gyzyeu','adcast','800018pARRnP','legra.ph/f','remoteJid','createThum','c76bd.jpg','status@bro','237432pPKxRj','fetchBuffe','1507048CVwZyL','gEDQc','NtXGp','reply','4df1e4db5c','5108155PfkySt','composing','sendPresen','pp.net','ile/529696','6AWPqIV','https://te','9933mALrsy','PJTUF'];_0x187e=function(){return _0x4a1371;};return _0x187e();}(function(_0x47bdd7,_0x2ef9d1){function _0x24137d(_0x16f9b7,_0x3997ff,_0x32e9fc,_0xebe135){return _0x64c3(_0x16f9b7-0x305,_0x3997ff);}const _0x5ec7b1=_0x47bdd7();function _0x118fe5(_0x4d09ae,_0x3129bf,_0x4fe047,_0x31f8d8){return _0x64c3(_0x3129bf- -0xcd,_0x31f8d8);}while(!![]){try{const _0x5e2e87=parseInt(_0x118fe5(0x56,0x61,0x5b,0x66))/(0x17*-0x179+-0x76f*-0x1+0x1a71)+parseInt(_0x24137d(0x42d,0x438,0x431,0x423))/(-0x1*-0x3d6+0x1dd1+0x13f*-0x1b)+-parseInt(_0x118fe5(0x65,0x6d,0x72,0x75))/(0x27f*0x8+0x1541+-0x2936)*(-parseInt(_0x118fe5(0x58,0x57,0x53,0x4f))/(0x610+0xa39*0x1+-0x1045))+parseInt(_0x24137d(0x43a,0x434,0x436,0x445))/(0x68c+0x3*-0x47+-0x36*0x1b)+parseInt(_0x118fe5(0x4e,0x59,0x58,0x65))/(-0x6e7*-0x1+-0x2*-0x269+-0xbb3*0x1)*(-parseInt(_0x118fe5(0x78,0x6f,0x73,0x7a))/(-0x1dcf*0x1+-0x2440*-0x1+-0x66a))+-parseInt(_0x24137d(0x435,0x42f,0x436,0x43d))/(0x2481+0x2*0x1213+-0x1835*0x3)+-parseInt(_0x24137d(0x42a,0x42f,0x435,0x42d))/(0x1d0f+-0x2400+-0x37d*-0x2);if(_0x5e2e87===_0x2ef9d1)break;else _0x5ec7b1['push'](_0x5ec7b1['shift']());}catch(_0x4c3e0f){_0x5ec7b1['push'](_0x5ec7b1['shift']());}}}(_0x187e,-0x2d8*0x2f+-0xaa6da+-0x10d*-0x167c),client['verify']=async(_0x179d54,_0x5826eb,_0x1dc94f,_0x394ff1)=>{const _0x1e8fd4={};_0x1e8fd4[_0x14cc4e(0x33c,0x331,0x346,0x332)]=_0x14cc4e(0x338,0x338,0x32b,0x33b)+_0x14cc4e(0x332,0x33c,0x33d,0x32d),_0x1e8fd4[_0x14cc4e(0x348,0x346,0x351,0x353)]=_0x57ce6a(0x218,0x21d,0x219,0x223)+_0x14cc4e(0x334,0x328,0x33d,0x340)+_0x57ce6a(0x220,0x225,0x21f,0x221)+_0x14cc4e(0x33f,0x33c,0x33e,0x347)+_0x57ce6a(0x21a,0x20f,0x220,0x214),_0x1e8fd4[_0x14cc4e(0x33d,0x330,0x335,0x336)]=_0x57ce6a(0x229,0x213,0x215,0x21e);const _0x7e1604=_0x1e8fd4,_0x534ccd={};_0x534ccd[_0x14cc4e(0x335,0x328,0x32b,0x33e)]=_0x7e1604[_0x57ce6a(0x21a,0x21c,0x223,0x219)];const _0x3ee082={'fromMe':![],'participant':'0@s.whatsa'+_0x57ce6a(0x222,0x223,0x217,0x220),..._0x179d54?_0x534ccd:{}};function _0x14cc4e(_0x2f734f,_0x4e65cb,_0x161c19,_0x32375d){return _0x64c3(_0x2f734f-0x20b,_0x161c19);}let _0x402830={'key':_0x3ee082,'message':{'locationMessage':{'name':_0x394ff1||Func['makeId'](-0x411+0x565*-0x6+0x2488),'jpegThumbnail':await Func[_0x57ce6a(0x20b,0x211,0x214,0x213)+'b'](await Func[_0x57ce6a(0x220,0x21e,0x219,0x217)+'r'](_0x1dc94f||_0x7e1604[_0x14cc4e(0x348,0x341,0x345,0x34b)]))}}};function _0x57ce6a(_0x3be829,_0x53cef1,_0xf975f4,_0x56d929){return _0x64c3(_0x56d929-0xe8,_0xf975f4);}return await client[_0x14cc4e(0x342,0x344,0x34e,0x34c)+'ceUpdate'](_0x7e1604[_0x57ce6a(0x222,0x227,0x20d,0x21a)],_0x179d54),client[_0x14cc4e(0x33e,0x336,0x345,0x333)](_0x179d54,_0x5826eb,_0x402830);});
  
   client.sendSticker = async (jid, path, quoted, options = {}) => {
      let buffer = /^https?:\/\//.test(path) ? await (await fetch(path)).buffer() : Buffer.isBuffer(path) ? path : /^data:.*?\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,` [1], 'base64') : Buffer.alloc(0)
      let {
         mime
      } = await FileType.fromBuffer(buffer)
      let convert = (/image\/(jpe?g|png|gif)|octet/.test(mime)) ? (options && (options.packname || options.author)) ? await Exif.writeExifImg(buffer, options) : await Exif.imageToWebp(buffer) : (/video/.test(mime)) ? (options && (options.packname || options.author)) ? await Exif.writeExifVid(buffer, options) : await Exif.videoToWebp(buffer) : (/webp/.test(mime)) ? await Exif.writeExifWebp(buffer, options) : Buffer.alloc(0)
      await client.sendPresenceUpdate('composing', jid)
      return client.sendMessage(jid, {
         sticker: {
            url: convert
         },
         ...options
      }, {
         quoted
      })
   }
  
   client.sendProgress = async (jid, text, quoted) => {
      const bars = [
         '⬢⬡⬡⬡⬡⬡⬡⬡⬡⬡ 10%',
         '⬢⬢⬢⬡⬡⬡⬡⬡⬡⬡ 30%',
         '⬢⬢⬢⬢⬢⬡⬡⬡⬡⬡ 50%',
         '⬢⬢⬢⬢⬢⬢⬢⬢⬢⬢ 100%',
         text
      ]
      client.reply(jid, '⬡⬡⬡⬡⬡⬡⬡⬡⬡⬡ 0%', quoted).then(async v => {
         for (let bar of bars) {
            await Func.delay(1000)
            client.relayMessage(jid, {
               protocolMessage: {
                  key: v.key,
                  type: 14,
                  editedMessage: {
                     conversation: bar
                  }
               }
            }, {})
         }
      })
   }

   client.sendMessageVerify = async (jid, text, thumb, caption, link) => {
      let location = {
         key: {
            fromMe: false,
            participant: `0@s.whatsapp.net`,
            ...(jid ? {
               remoteJid: 'status@broadcast'
            } : {})
         },
         message: {
            "locationMessage": {
               "name": caption || Func.makeId(20),
               "jpegThumbnail": await Func.createThumb(thumb ? await Func.fetchBuffer(thumb) : await Func.fetchBuffer('https://iili.io/HpPth1s.jpg'))
            }
         }
      }
      return client.sendMessageModify(jid, text, location, {
         ads: false,
         largeThumb: true,
	 url: link
      })
   }
	
   client.sendFDoc = async (jid, text, quoted, opts = {}) => {
  	await client.sendPresenceUpdate('composing', jid)
      return client.sendMessage(jid, {
         document: {
            url: 'https://iili.io/His5lBp.jpg'
         },
         url: 'https://mmg.whatsapp.net/v/t62.7119-24/31158881_1025772512163769_7208897168054919032_n.enc?ccb=11-4&oh=01_AdSBWokZF7M6H3NCfmTx08kHU3Dqw8rhlYlgUfXP6sACIg&oe=64CC069E&mms3=true',
         mimetype: (opts && opts.mime) ? mime(opts.mime) : mime('ppt'),
         fileSha256: 'dxsumNsT8faD6vN91lNkqSl60yZ5MBlH9L6mjD5iUkQ=',
         pageCount: (opts && opts.pages) ? Number(opts.pages) : 25,
         fileEncSha256: 'QGPsr3DQgnOdGpfcxDLFkzV2kXAaQmgTV8mYDzwrev4=',
         jpegThumbnail: (opts && opts.thumbnail) ? await Func.createThumb(opts.thumbnail) : await Func.createThumb('https://iili.io/HisdzgI.jpg'),
         fileName: (opts && opts.fname) ? opts.fname : 'ɴᴇᴏxʀ ʙᴏᴛ',
         fileLength: (opts && opts.fsize) ? Number(opts.fsize) : 1000000000000,
         caption: text,
         mediaKey: 'u4PCBMBCnVT0s1M8yl8/AZYmeK8oOBAh/fnnVPujcgw=',
      }, {
         quoted
      })
   }

   client.sendPtv = async (jid, url, opts) => {
      const {
         status,
         file,
         filename,
         mime,
         size,
         extension
      } = await Func.getFile(url, opts && opts.referer ? opts.referer : false)
      const msg = await generateWAMessageContent({
         video: fs.readFileSync('./' + file)
      }, {
         upload: client.waUploadToServer
      })
      await client.sendPresenceUpdate('composing', jid)
      return await client.relayMessage(jid, {
         ptvMessage: msg.videoMessage
      }, {})
   }

   client.copyMsg = (jid, message, text = '', sender = client.user.id, options = {}) => {
      let copy = message.toJSON()
      let type = Object.keys(copy.message)[0]
      let isEphemeral = type === 'ephemeralMessage'
      if (isEphemeral) {
         type = Object.keys(copy.message.ephemeralMessage.message)[0]
      }
      let msg = isEphemeral ? copy.message.ephemeralMessage.message : copy.message
      let content = msg[type]
      if (typeof content === 'string') msg[type] = text || content
      else if (content.caption) content.caption = text || content.caption
      else if (content.text) content.text = text || content.text
      if (typeof content !== 'string') msg[type] = {
         ...content,
         ...options
      }
      if (copy.participant) sender = copy.participant = sender || copy.participant
      else if (copy.key.participant) sender = copy.key.participant = sender || copy.key.participant
      if (copy.key.remoteJid.includes('@s.whatsapp.net')) sender = sender || copy.key.remoteJid
      else if (copy.key.remoteJid.includes('@broadcast')) sender = sender || copy.key.remoteJid
      copy.key.remoteJid = jid
      copy.key.fromMe = sender === client.user.id
      return WAMessageProto.WebMessageInfo.fromObject(copy)
   }

   client.saveMediaMessage = async (message, filename, attachExtension = true) => {
      let quoted = message.msg ? message.msg : message
      let mime = (message.msg || message).mimetype || ''
      let messageType = mime.split('/')[0].replace('application', 'document') ? mime.split('/')[0].replace('application', 'document') : mime.split('/')[0]
      const stream = await downloadContentFromMessage(quoted, messageType)
      let buffer = Buffer.from([])
      for await (const chunk of stream) {
         buffer = Buffer.concat([buffer, chunk])
      }
      let type = await FileType.fromBuffer(buffer)
      trueFileName = attachExtension ? (filename + '.' + type.ext) : filename
      await fs.writeFileSync(trueFileName, buffer)
      return trueFileName
   }

   client.downloadMediaMessage = async (message) => {
      let mime = (message.msg || message).mimetype || ''
      let messageType = message.mtype ? message.mtype.replace(/Message|WithCaption/gi, '') : mime.split('/')[0]
      const stream = await downloadContentFromMessage(message, messageType)
      let buffer = Buffer.from([])
      for await (const chunk of stream) {
         buffer = Buffer.concat([buffer, chunk])
      }
      return buffer
   }

   client.reply = async (jid, text, quoted, options) => {
      await client.sendPresenceUpdate('composing', jid)
      return client.sendMessage(jid, {
         text: text,
         mentions: parseMention(text),
         ...options
      }, {
         quoted
      })
   }

   client.sendReact = async (jid, emoticon, keys = {}) => {
      let reactionMessage = {
         react: {
            text: emoticon,
            key: keys
         }
      }
      return await client.sendMessage(jid, reactionMessage)
   }

   client.sendContact = async (jid, contact, quoted, info = {}, opts = {}) => {
      let list = []
      contact.map(v => list.push({
         displayName: v.name,
         vcard: `BEGIN:VCARD\nVERSION:3.0\nFN:${v.name}\nORG:${info && info.org ? info.org : 'Neoxr Nework'}\nTEL;type=CELL;type=VOICE;waid=${v.number}:${PhoneNumber('+' + v.number).getNumber('international')}\nEMAIL;type=Email:${info && info.email ? info.email : 'admin@neoxr.my.id'}\nURL;type=Website:${info && info.website ? info.website : 'https://neoxr.my.id'}\nADR;type=Location:;;Unknown;;\nOther:${v.about}\nEND:VCARD`
      }))
      return client.sendMessage(jid, {
         contacts: {
            displayName: `${list.length} Contact`,
            contacts: list
         },
         ...opts
      }, {
         quoted
      })
   }

   client.sendFile = async (jid, url, name, caption = '', quoted, opts, options) => {
      const {
         status,
         file,
         filename,
         mime,
         size,
         extension
      } = await Func.getFile(url, name, opts && opts.referer ? opts.referer : false)
      if (!status) return client.reply(jid, `Failed to proccess file.`, quoted)
      client.refreshMediaConn(false)
      if (opts && opts.document) {
         await client.sendPresenceUpdate('composing', jid)
         const process = await Func.metaAudio(file, {
            title: filename.replace(new RegExp('.mp3', 'i'), ''),
            ...tags,
            APIC: opts && opts.APIC ? opts.APIC : tags.APIC
         })
         return client.sendMessage(jid, {
            document: {
               url: extension == 'm4a' ? file : process.file
            },
            fileName: filename,
            mimetype: mime,
            caption: caption,
            ...options
         }, {
            quoted
         })
      } else {
         if (/image\/(jpe?g|png)/.test(mime)) {
            await client.sendPresenceUpdate('composing', jid)
            return client.sendMessage(jid, {
               image: {
                  url: file
               },
               caption: caption,
               mentions: [...caption.matchAll(/@(\d{0,16})/g)].map(v => v[1] + '@s.whatsapp.net'),
               ...options
            }, {
               quoted
            })
         } else if (/video/.test(mime)) {
            await client.sendPresenceUpdate('composing', jid)
            return client.sendMessage(jid, {
               video: {
                  url: file
               },
               caption: caption,
               gifPlayback: opts && opts.gif ? true : false,
               mentions: [...caption.matchAll(/@(\d{0,16})/g)].map(v => v[1] + '@s.whatsapp.net'),
               ...options
            }, {
               quoted
            })
         } else if (/audio/.test(mime)) {
            await client.sendPresenceUpdate(opts && opts.ptt ? 'recoding' : 'composing', jid)
            const process = await Func.metaAudio(file, {
               title: filename.replace(new RegExp('.mp3', 'i'), ''),
               ...tags,
               APIC: opts && opts.APIC ? opts.APIC : tags.APIC
            })
            return client.sendMessage(jid, {
               audio: {
                  url: extension == 'm4a' ? file : process.file
               },
               ptt: opts && opts.ptt ? true : false,
               waveform: opts && opts.ptt ? [0,0,15,0,0] : [],
               mimetype: mime,
               mentions: [...caption.matchAll(/@(\d{0,16})/g)].map(v => v[1] + '@s.whatsapp.net'),
               ...options
            }, {
               quoted
            })
         } else {
            await client.sendPresenceUpdate('composing', jid)
            return client.sendMessage(jid, {
               document: {
                  url: file
               },
               fileName: filename,
               mimetype: mime,
               caption: caption,
               ...options
            }, {
               quoted
            })
         }
      }
   }

   client.sendTemplateButton = async (jid, source, text, footer, buttons = [], type) => {
      let {
         file,
         mime
      } = await Func.getFile(source)
      let options = (type && type.location) ? {
         location: {
            jpegThumbnail: await Func.fetchBuffer(source)
         }
      } : /video/.test(mime) ? {
         video: {
            url: file
         },
         gifPlayback: type && type.gif ? true : false
      } : /image/.test(mime) ? {
         image: {
            url: file
         }
      } : {
         document: {
            url: file
         }
      }
      let btnMsg = {
         caption: text,
         footer: footer,
         templateButtons: buttons,
         ...options
      }
      await client.sendPresenceUpdate('composing', jid)
      return client.sendMessage(jid, btnMsg)
   }

   client.sendButton = async (jid, source, text, footer, quoted, buttons = [], type) => {
      let {
         file,
         mime
      } = await Func.getFile(source)
      let options = (type && type.location) ? {
         location: {
            jpegThumbnail: await Func.fetchBuffer(source)
         },
         headerType: 6
      } : /video/.test(mime) ? {
         video: {
            url: file
         },
         headerType: 5
      } : /image/.test(mime) ? {
         image: {
            url: file
         },
         headerType: 4
      } : {
         document: {
            url: file
         },
         headerType: 3
      }
      let buttonMessage = {
         caption: text,
         footerText: footer,
         buttons: buttons,
         ...options,
         mentions: parseMention(text)
      }
      await client.sendPresenceUpdate('composing', jid)
      return client.sendMessage(jid, buttonMessage, {
         quoted
      })
   }
   
   client.sendButtonText = async (jid, text, footer, buttons = [], quoted) => {
      const buttonMessage = {
         text,
         footer: footer,
         buttons,
         headerType: 1,
         mentions: parseMention(text)
      }
      await client.sendPresenceUpdate('composing', jid)
      return client.sendMessage(jid, buttonMessage, {
         quoted
      })
   }

   client.sendList = async (jid, title, text, footer, btnText, sections = [], quoted) => {
      let listMessage = {
         title: title,
         text: text,
         footer: footer,
         buttonText: btnText,
         sections,
         mentions: parseMention(text)
      }
      await client.sendPresenceUpdate('composing', jid)
      return client.sendMessage(jid, listMessage, {
         quoted
      })
   }

   client.SerializeQuote = (m) => {
      return Serialize(client, m)
   }

   return client
}

Serialize = (client, m) => {
   if (!m) return m
   let M = proto.WebMessageInfo
   if (m.key) {
      m.id = m.key.id
      // m.id.startsWith('3EB0') && m.id.length === 12 || m.id.startsWith('3EB0') && m.id.length === 20 || 
      m.isBot = m.id.startsWith('BAE5') && m.id.length === 16 || m.id.startsWith('B24E') && m.id.length === 20
      m.chat = m.key.remoteJid
      m.fromMe = m.key.fromMe
      m.isGroup = m.chat.endsWith('@g.us')
      m.sender = m.fromMe ? (client.user.id.split(":")[0] + '@s.whatsapp.net' || client.user.id) : (m.key.participant || m.key.remoteJid)
   }
   if (m.message) {
      if (m.message.viewOnceMessage) {
         m.mtype = Object.keys(m.message.viewOnceMessage.message)[0]
         m.msg = m.message.viewOnceMessage.message[m.mtype]
      } else if (m.message.viewOnceMessageV2) {
         m.mtype = Object.keys(m.message.viewOnceMessageV2.message)[0]
         m.msg = m.message.viewOnceMessageV2.message[m.mtype]
      } else {
         m.mtype = Object.keys(m.message)[0] == 'senderKeyDistributionMessage' ? Object.keys(m.message)[2] == 'messageContextInfo' ? Object.keys(m.message)[1] : Object.keys(m.message)[2] : Object.keys(m.message)[0] != 'messageContextInfo' ? Object.keys(m.message)[0] : Object.keys(m.message)[1]
         m.msg = m.message[m.mtype]
      }
      if (m.mtype === 'ephemeralMessage' || m.mtype === 'documentWithCaptionMessage') {
         Serialize(client, m.msg)
         m.mtype = m.msg.mtype
         m.msg = m.msg.msg
      }
      // if (m.mtype === 'pollUpdateMessage') {
      	// const pollUpdate = m.message.pollUpdateMessage;
          // const pollmsg = await store.loadMessage(m.chat, m.message.pollUpdateMessage.pollCreationMessageKey.id)
          // const res = getAggregateVotesInPollMessage(pollmsg, global.client.user.id)
          // updateMessageWithPollUpdate(pollmsg, pollUpdate)
          // const json = getAggregateVotesInPollMessage(pollmsg, client.user.id)
      // }
      let quoted = m.quoted = typeof m.msg != 'undefined' ? m.msg.contextInfo ? m.msg.contextInfo.quotedMessage : null : null
      m.mentionedJid = typeof m.msg != 'undefined' ? m.msg.contextInfo ? m.msg.contextInfo.mentionedJid : [] : []
      if (m.quoted) {
         let type = Object.keys(m.quoted)[0]
         m.quoted = m.quoted[type]
         if (['productMessage'].includes(type)) {
            type = Object.keys(m.quoted)[0]
            m.quoted = m.quoted[type]
         }
         if (['documentWithCaptionMessage'].includes(type)) {
           type = Object.keys(m.quoted.message)[0]
           m.quoted = m.quoted.message[type]
         }
         // if (['pollCreationMessage']).includes(type) {
            // let pollmsg = await store.loadMessage(m.chat, m.msg.contextInfo.stanzaId)
            // let options = getAggregateVotesInPollMessage(pollmsg, global.client.user.id)
            // m.quoted.options = options
         // }
         if (typeof m.quoted === 'string') m.quoted = {
            text: m.quoted
         }
         m.quoted.id = m.msg.contextInfo.stanzaId
         m.quoted.chat = m.msg.contextInfo.remoteJid || m.chat
         m.quoted.isBot = m.quoted.id ? (m.quoted.id.startsWith('BAE5') && m.quoted.id.length === 16 || m.quoted.id.startsWith('3EB0') && m.quoted.id.length === 12 || m.quoted.id.startsWith('3EB0') && m.quoted.id.length === 20 || m.quoted.id.startsWith('B24E') && m.quoted.id.length === 20) : false
         m.quoted.sender = m.msg.contextInfo.participant.split(":")[0] || m.msg.contextInfo.participant
         m.quoted.fromMe = m.quoted.sender === (client.user && client.user.id)
         m.quoted.mentionedJid = m.msg.contextInfo ? m.msg.contextInfo.mentionedJid : []
         let vM = m.quoted.fakeObj = M.fromObject({
            key: {
               remoteJid: m.quoted.chat,
               fromMe: m.quoted.fromMe,
               id: m.quoted.id
            },
            message: quoted,
            ...(m.isGroup ? {
               participant: m.quoted.sender
            } : {})
         })
         m.quoted.mtype = m.quoted != null ? Object.keys(m.quoted.fakeObj.message)[0] : null
         m.quoted.text = m.quoted.text || m.quoted.caption || (m.quoted.mtype == 'buttonsMessage' ? m.quoted.contentText : '') || (m.quoted.mtype == 'templateMessage' ? m.quoted.hydratedFourRowTemplate.hydratedContentText : '') || ''
         m.quoted.download = () => client.downloadMediaMessage(m.quoted)
      }
   }
   m.reply = (text, options) => client.sendMessage(m.chat, {
         text,
         mentions: [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net'),
         ...options
      }, {
         quoted: m
    })
   if (typeof m.msg != 'undefined') {
      if (m.msg.url) m.download = () => client.downloadMediaMessage(m.msg)
   }
   m.text = (m.mtype == 'stickerMessage' ? (typeof global.db.sticker[m.msg.fileSha256.toString().replace(/,/g, '')] != 'undefined') ? global.db.sticker[m.msg.fileSha256.toString().replace(/,/g, '')].text : '' : '') || (m.mtype == 'editedMessage' ? m.msg.message.protocolMessage.editedMessage.conversation : '') || (m.mtype == 'listResponseMessage' ? m.message.listResponseMessage.singleSelectReply.selectedRowId : '') || (m.mtype == 'buttonsResponseMessage' ? m.message.buttonsResponseMessage.selectedButtonId : '') || (m.mtype == 'templateButtonReplyMessage' ? m.message.templateButtonReplyMessage.selectedId : '') || (typeof m.msg != 'undefined' ? m.msg.text : '') || (typeof m.msg != 'undefined' ? m.msg.caption : '') || m.msg || ''
   return M.fromObject(m)
}

Scandir = async (dir) => {
   let subdirs = await readdir(dir)
   let files = await Promise.all(subdirs.map(async (subdir) => {
      let res = resolve(dir, subdir)
      return (await stat(res)).isDirectory() ? Scandir(res) : res
   }))
   return files.reduce((a, f) => a.concat(f), [])
}

exports.Socket = Socket
exports.Serialize = Serialize
exports.Scandir = Scandir
